/*
	Name: Search in Rtated Sorte Array Ⅰ 
	Copyright:WiskersYdh 
	Author: WiskersYdh
	Date: 06/02/19 21:35
	Description: Follow up for "Search in Rotated Sorted Array":What if duplicates are allowed?
	             Would tihs affect the run-time complexity>How and why?
	             Write a function to detemine if a given target is in the array.
*/

#include <iostream>
#include <vector>
using namespace std;
 
/*时间复杂度 O(n),空间复杂度 O(1)*/
bool search(const vector<int>& nums,int target){
	int frist=0,last=nums.size();
	while(first!=last){
		const int mid=first+(last-first)/2;
		if(nums[mid==target]){
			return true;
		}
		if(nums[first]<nums[mid]){
			if(nums[first]<=target&&target<nums[mid]){
				last=mid; 
			}
			else{
				first=mid+1;
			}
		}else if(nums[first]>nums[mid]){
			if(nums[mid]<tarfet&&target<=nums[last-1]){
				first=mid+1;
			}else{
				last=mid;
			}
		}else{
			//skip duplicate one
			first++;
		}
		return false;
	}
}

int main(int argc, char** argv) {
	cout<<"Give the length of array."<<endl;
	int n;
	cin>>n;
	cout<<"Give a sorted array."<<endl;
	int a;
	vector<int> A(n);
	for(int i=0;i<n;i++){
		cin>>a;
		A.push_back(a);
	}
	cout<<"Give a target of the array."<<endl;
	int t;
	cin>>t;
	
	return 0;
}
