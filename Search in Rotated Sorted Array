/*
	Name: Search in Rotated Sorted Array
	Copyright: WiskersYdh
	Author: WiskersYdh
	Date: 06/02/19 21:09
	Description: Suppose a sorted array is ratated at some pivot unknown to you beforehand.
	             (i.e.,0 1 2 3 4 5 6 7 might become 4 5 6 7 0 1 2).
				 You are given a target value to search. If found in the array its index,
				 otherswise return -1.
				 You may assume no duplicates exists in tne array.
*/

#include <iostream>
#include <vector>
using namespace std;

/* 二分查找，时间复杂度 O(log n), 空间复杂度 O(1) */
int search(const vector<int>& nums, int target) {
	int first=0,last=nums.size();
	while(first!=last) {
		const int mid=first+(last-first)/2;
		if(nums[mid]==target) {
			return mid;
		}
		if(nums[first]<=nums[mid]) {
			if(nums[first]<=target&&target<nums[mid]) {
				last=mid;
			} else {
				first=mid+1;
			}
		} else {
			if(nums[mid]<target&&target<=nums[last-1]) {
				first=mid+1;
			} else {
				last=mid;
			}
		}
	}
	return -1;
}

int main(int argc, char** argv) {
	cout<<"Give the length of array."<<endl;
	int n;
	cin>>n;
	cout<<"Give a sorted array."<<endl;
	vector<int> A(n);
	int a,NumOfArray;
	for(int i=0; i<n; i++) {
		cin>>a;
		A.push_back(a);
	}
	cout<<"Give the target."<<endl;
	int t;
	cin>>t;
	NumOfArray=search(A,t);
	if(NumOfArray==-1) {
		cout<<"Can't find!"<<endl;
	} else {
		cout<<"The index of target is "<<NumOfArray<<endl;
	}
	return 0;
}
